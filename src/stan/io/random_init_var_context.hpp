#ifndef STAN__IO__RANDOM_INIT_VAR_CONTEXT_HPP
#define STAN__IO__RANDOM_INIT_VAR_CONTEXT_HPP

#include <vector>
#include <stan/io/var_context.hpp>

namespace stan {
  namespace io {
    
    /**
     * Creates random initial values for a given model.
     *
     * The random_init_var_context object calls the RNG
     * to generate random initial values for the model.
     *
     * This var_context will not generate inits for variables not
     * within the model provided.
     *
     * @tparam Model type of Stan model
     * @tparam RNG type of random number of generator
     */
    template <class Model, class RNG>
    class random_init_var_context : public stan::io::var_context {
    private:
      const Model& model_;
      RNG& rng_;
      
      std::vector<std::string> names_;
      std::vector<std::vector<size_t> > dims_;

    public:
      
      /**
       * Construct a random_init_var_context from a model
       * and a random number generator.
       *
       * @param model Model that this var_context will generate
       *   random initializations for.
       * @param rng Random number generator to generate random
       *   inits.
       */
      random_init_var_context(const Model& model,
                              RNG& rng) 
        : model_(model), rng_(rng) {
        model_.get_param_names(names_);
        model_.get_dims(dims_);
      }

      /**
       * Return <code>true</code> if the specified variable name is a
       * parameter in the model and this var_context will provide
       * random initial values. This method returns <code>false</code>
       * for integer variables.
       *
       * This var context currently does not handle integer initial
       * values.
       *
       * @param name Variable name to test.
       * @return <code>true</code> if the variable can be generated by 
       *   this var_context.
       */
      bool contains_r(const std::string& name) const {
        return std::find(names_.begin(), names_.end(), name) != names_.end();
      }

      /**
       * Return the double random initial values for the variable with
       * the specified name or null.
       *
       * The returned value matches the dimension specified by dims_r.
       * Each value is generated using the random number generator.
       *
       * @param name Name of variable.
       * @return Values of variable.
       */
      std::vector<double> vals_r(const std::string& name) const {
        std::vector<double> vals;
        if (contains_r(name)) {
          size_t length = 1;
          std::vector<size_t> dims = dims_r(name);
          for (size_t n = 0; n < dims.size(); n++)
            length *= dims[n];
          
          vals.resize(length);
          for (int n = 0; n < length; n++) 
            vals[n] = rng_();
        } 
        return vals;
      }

      /**
       * Return the dimensions for the double variable with the specified
       * name.
       *
       * This matches the size provided by the model.
       *
       * @param name Name of variable.
       * @return Dimensions of variable.
       */
      std::vector<size_t> dims_r(const std::string& name) const {
        std::vector<size_t> dims;
        if (contains_r(name)) {
          size_t index = std::find(names_.begin(), names_.end(), name) 
            - names_.begin();
          return dims_[index];
        }
        return dims;
      }

      /**
       * Return <code>false</code>. 
       *
       * This var context currently does not handle integer initial
       * values.
       *
       * @param name Variable name to test.
       * @return <code>false</code>.
       */
      bool contains_i(const std::string& name) const {
        return false;
      }

      /**
       * Return the integer values for the variable with the specified
       * name.
       *
       * This var_context does not deal with integer values: 
       * currently returns no values.
       *
       * @param name Name of variable.
       * @return Values.
       */
      std::vector<int> vals_i(const std::string& name) const  {
        std::vector<int> vals;
        return vals;
      }

      /**
       * Return the dimensions for the integer variable with the specified
       * name.
       *
       * This var_context does not deal with integer values: 
       * currently returns no dimensions.
       *
       * @param name Name of variable.
       * @return Dimensions of variable.
       */
      std::vector<size_t> dims_i(const std::string& name) const {
        std::vector<size_t> dims;
        return dims;
      }

      /**
       * Return a list of the names of the floating point variables in
       * the model.
       *
       * @param names Vector to store the list of names in.
       */
      void names_r(std::vector<std::string>& names) const {
        names = names_;
        return;
      }

      /**
       * Return a list of the names of the integer variables that can
       * be generated by the var context.
       *
       * This var_context does not deal with integer values: currently returns
       * an empty vector.
       *
       * @param names Vector to store the list of names in.
       */
      void names_i(std::vector<std::string>& names) const {
        names.resize(0);
        return;
      }
      
    };
    
  }
}

#endif
