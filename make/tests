#
# LIBGTEST is the google test library
# GTEST_MAIN is the file that contains the google test
##
LIBGTEST = test/libgtest.a
GTEST_MAIN = $(GTEST)/src/gtest_main.cc
CFLAGS_GTEST += -I $(GTEST)/include -I $(GTEST)

##
# Build the google test library.
## 
$(LIBGTEST): $(LIBGTEST)(test/gtest.o)

test/gtest.o: $(GTEST)/src/gtest-all.cc
	@mkdir -p test
	$(COMPILE.c) -O$O $(CFLAGS_GTEST) $< $(OUTPUT_OPTION)


##
# Rule for building a test
##
test/%.o : src/test/%_test.cpp $(LIBGTEST)
	@mkdir -p $(dir $@)
	$(COMPILE.c) -O$O $(CFLAGS_GTEST) $< $(OUTPUT_OPTION)

##
# Rule for generating dependencies.
##
test/%.d : src/test/%_test.cpp
	@if test -d $(dir $@); \
	then \
	(set -e; \
	rm -f $@; \
	$(CC) $(CFLAGS) -O$O $(CFLAGS_GTEST) $(TARGET_ARCH) -MM $< > $@.$$$$; \
	sed -e 's,\($(notdir $*)\)\(_test\)\.o[ :]*,$(dir $@)\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$ ); \
	fi


############################################################
##
# Target to verify header files within Stan has
# enough include calls
##
HEADER_TESTS := $(addsuffix -test,$(shell find src/stan -name '*.hpp' -type f)) 

ifeq ($(OS),win) 
  DEV_NULL = nul
else
  DEV_NULL = /dev/null
endif

.PHONY: HEADER_TESTS
%.hpp-test : %.hpp test/dummy.cpp
	$(COMPILE.c) -O0 -include $< -o $(DEV_NULL) test/dummy.cpp

test/dummy.cpp:
	@mkdir -p test
	@touch $@
	@echo "int main() {return 0;}" >> $@

.PHONY: test-headers
test-headers: $(HEADER_TESTS)

############################################################


##
# PERCENT used for secondary expansion
# $$(PERCENT) turns into %.
##
PERCENT = %

##
# ALL_TESTS is the set of all test files
#   This needs to be an '=' assignment and not a ':='.
##
ALL_TESTS = $(shell find src/test -type f -name '*_test.cpp')

ALL_TEST_EXECUTABLES = $(patsubst src/%_test.cpp,%$(EXE),$(ALL_TESTS))

GRAMMAR_TESTS = $(foreach dir,\
                          $(patsubst src/%,%,$(shell find src/test -type d -name 'gm')),\
                          $(filter $(dir)/%,$(ALL_TEST_EXECUTABLES)))

##
# Generate autodependencies for test files.
# Adapted from the gnu make manual.
# http://www.gnu.org/software/make/manual/html_node/Automatic-Prerequisites.html#Automatic-Prerequisites
##
$(GRAMMAR_TESTS) : test/%$(EXE) : test/%.o bin/libstan.a bin/libstanc.a
	@mkdir -p $(dir $@)
	$(LINK.c) -O$O $(GTEST_MAIN) $< $(CFLAGS_GTEST) $(OUTPUT_OPTION) $(LIBGTEST) $(LDLIBS) $(LDLIBS_STANC)

test/%$(EXE) : test/%.o bin/libstan.a
	@mkdir -p $(dir $@)
	$(LINK.c) -O$O $(GTEST_MAIN) $< $(CFLAGS_GTEST) $(OUTPUT_OPTION) $(LIBGTEST) $(LDLIBS)



##
# Build the stanc compiler as a test executable
##
.PRECIOUS: test/test-models/stanc$(EXE)
test/test-models/stanc$(EXE) : src/test/test-models/stanc.cpp bin/libstanc.a
	@mkdir -p $(dir $@)
	$(LINK.c) -O$(O_STANC) $(OUTPUT_OPTION) $< $(LDLIBS_STANC)

##
# TEST_MODELS is the set of all the test models.
# Those in the 'no_main' subdirectory are supposed to be compiled without a main function.
##
TEST_MODELS := $(shell find src/test/test-models -type f -name '*.stan')

##
# Use the stanc compiler to generate C++ from Stan programs
##
$(patsubst %.stan,%.cpp,$(TEST_MODELS)) : %.cpp : %.stan test/test-models/stanc$(EXE)
	$(WINE) test/test-models/stanc$(EXE) --o=$@ $<

##
# Tests that also depend on the generated C++ of Stan programs.
##

test/unit/io/mcmc_writer.o: src/test/test-models/no-main/io_example.cpp
test/unit/gm/generator.o: src/test/test-models/no-main/gm/test_lp.cpp

test/unit/model/util.o: src/test/test-models/no-main/model/valid.cpp src/test/test-models/no-main/model/domain_fail.cpp

test/unit/mcmc/hmc/hamiltonians/base_hamiltonian.o: src/test/test-models/no-main/mcmc/hmc/hamiltonians/funnel.cpp
test/unit/mcmc/hmc/hamiltonians/unit_e_metric.o: src/test/test-models/no-main/mcmc/hmc/hamiltonians/funnel.cpp
test/unit/mcmc/hmc/hamiltonians/diag_e_metric.o: src/test/test-models/no-main/mcmc/hmc/hamiltonians/funnel.cpp
test/unit/mcmc/hmc/hamiltonians/dense_e_metric.o: src/test/test-models/no-main/mcmc/hmc/hamiltonians/funnel.cpp
test/unit/mcmc/hmc/integrators/expl_leapfrog.o: src/test/test-models/no-main/mcmc/hmc/integrators/command.cpp 
test/unit/mcmc/hmc/integrators/expl_leapfrog2.o: src/test/test-models/no-main/mcmc/hmc/integrators/gauss.cpp

test/unit/common/do_bfgs_optimize.o: src/test/test-models/no-main/optimization/rosenbrock.cpp
test/unit/optimization/bfgs_linesearch.o: src/test/test-models/no-main/optimization/rosenbrock.cpp
test/unit/optimization/bfgs_minimizer.o: src/test/test-models/no-main/optimization/rosenbrock.cpp
test/unit/optimization/bfgs.o: src/test/test-models/no-main/optimization/rosenbrock.cpp
test/unit/optimization/bfgs_update.o: src/test/test-models/no-main/optimization/rosenbrock.cpp
test/unit/optimization/lbfgs_update.o: src/test/test-models/no-main/optimization/rosenbrock.cpp

test/unit/common/command_init.o: src/test/test-models/no-main/common/test_lp.cpp
test/unit/common/run_markov_chain.o: src/test/test-models/no-main/common/test_lp.cpp
test/unit/common/sample.o: src/test/test-models/no-main/common/test_lp.cpp
test/unit/common/warmup.o: src/test/test-models/no-main/common/test_lp.cpp
test/unit/common/write_iteration.o: src/test/test-models/no-main/common/test_lp.cpp

test/unit/gm/raise_exception/raise_exception_mult_args.o: src/test/test-models/no-main/gm/raise_exception_mult_args.cpp

test/unit/gm/raise_exception/raise_exception_model.o: src/test/test-models/no-main/gm/raise_exception_model.cpp
test/unit/gm/raise_exception/raise_ex_func_call_model.o: src/test/test-models/no-main/gm/raise_ex_func_call_model.cpp

test/unit/gm/raise_exception/raise_exception_transformed_data.o: src/test/test-models/no-main/gm/raise_exception_transformed_data.cpp
test/unit/gm/raise_exception/raise_ex_func_call_transformed_data.o: src/test/test-models/no-main/gm/raise_ex_func_call_transformed_data.cpp

test/unit/gm/raise_exception/raise_exception_transformed_parameters.o: src/test/test-models/no-main/gm/raise_exception_transformed_parameters.cpp
test/unit/gm/raise_exception/raise_ex_func_call_transformed_parameters.o: src/test/test-models/no-main/gm/raise_ex_func_call_transformed_parameters.cpp

test/unit/gm/raise_exception/raise_exception_generated_quantities.o: src/test/test-models/no-main/gm/raise_exception_generated_quantities.cpp
test/unit/gm/raise_exception/raise_ex_func_call_generated_quantities.o: src/test/test-models/no-main/gm/raise_ex_func_call_generated_quantities.cpp

##
# Target to verify code generated Stan programs
# (.stan -> .cpp) are compilable
##
.PHONY: %.cpp-test
%.cpp-test : %.cpp
	$(COMPILE.c) -fsyntax-only -O$O $< 

test/integration/compile_models$(EXE) : $(patsubst %.stan,%.cpp-test,$(shell find src/test/test-models/syntax-only -type f -name '*.stan'))

##
# Agrad distributions test generator
##
test/unit-distribution/generate_tests$(EXE) : src/test/unit-distribution/generate_tests.cpp
	@mkdir -p $(dir $@)
	$(LINK.c) -O$(O_STANC) $(CFLAGS) $< $(OUTPUT_OPTION)

src/test/unit-distribution/%_00000_generated_test.cpp : src/test/unit-distribution/%_test.hpp | test/unit-distribution/generate_tests$(EXE)
	@echo "--- Generating tests for $(notdir $<) ---"
	$(WINE) test/unit-distribution/generate_tests$(EXE) $<




##
# For src/test/unit-distribution tests, adding
# dependency on generated tests.
##

ifneq ($(filter second-expansion,$(.FEATURES)),)

DISTRIBUTION_TESTS := $(shell find src/test/unit-distribution -type f -name '*.hpp')
.SECONDEXPANSION:
$(filter src/test/unit-distribution%,$(TEST_TARGETS)): src/test/unit-distribution%: $$(patsubst $$(PERCENT)_test.hpp,$$(PERCENT)_00000_generated_test.cpp,$$(filter $$@$$(PERCENT),$$(DISTRIBUTION_TESTS)))

endif

# Set the variable GENERATE_TESTS to non-empty string
# when the target is generating distribution tests.
# This indicates whether make should be rerun.
#
#   Notes:
#     The first argument to filter-out is the number of unique
#        generated distribution tests that have already been generated
#        in this current run of make. If this is the stage where
#        we are generating tests, this number will be less than the
#        number of tests to generate. (0 if running from a clean state)
#     The second argument to filter-out is the number of unique
#        generated distribution tests that should be generated. 
#        This is determined by the existence of *_test.hpp files in 
#        the appropriate directory.
#     The filter-out function returns the total number of tests that should
#        be generated if they have not yet been generated.
##
$(filter src/test/unit-distribution%,$(TEST_TARGETS)): \
GENERATE_TESTS = $(filter-out $(words $(filter %_00000_generated$(EXE),$^)),\
                              $(words $(filter $@%_00000_generated_test.cpp,$(ALL_TESTS))))



